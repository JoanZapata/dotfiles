set nocompatible

" Initialisation de pathogen
call pathogen#infect()
call pathogen#helptags()

syntax on          " Enable syntax highlighting
filetype on        " Enable filetype detection
filetype indent on " Enable filetype-specific indenting
filetype plugin on " Enable filetype-specific plugins

set mouse=a
set updatetime=250

set number
set background=dark
colorscheme solarized
let g:solarized_termcolors=256
let g:solarized_contrast="high"
let g:solarized_visibility="high"
let g:solarized_hitrail=1

" Size of tabulatons, which are in fact spaces
set expandtab
set tabstop=2
set shiftwidth=2

set clipboard=unnamedplus

" Font in GUI mode: http://www.levien.com/type/myfonts/inconsolata.html
set guifont=Inconsolata\ 13
" remove the useless buttons from gvim
set guioptions=nomenu
" Remove menubar
"set guioptions-=m
" Add vim icon and use console instead of popups
set guioptions+=ic
" Remove bottom scrolling bar.
set guioptions-=b
" Copy visual area to paste buffer
set go+=a

" Add · for trailing spaces.
" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,trail:· list

" Highlight column 80, 120 and onward
let &colorcolumn="80,".join(range(120,999),",")

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
  let g:ctrlp_dotfiles = 1
endif

" Incremental search : search befor return is typed
set incsearch

" Highlight matched pattern when searching or replacing.
set hlsearch

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" bind \ (backward slash) to grep shortcut
command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
nnoremap \ :Ag<SPACE>

" Search files
map <c-p> :CtrlPMixed<CR>

" Persistent undo
set undofile
set undodir=~/.vim/undodir
set showcmd

" Cool menu which show possible autocompletion
set wildmenu
set wildmode=list:longest,full

" Rails specific
let g:rspec_command = "Dispatch bundle exec rspec {spec}"

" Type :w!! when forgot sudo and editing a file.
cmap w!! w !sudo tee % >/dev/null

" , is a nice leader key
let mapleader = ","

noremap! <C-BS> <C-w>
noremap! <C-h> <C-w>

" Toggle NERDTree
map <F3> :NERDTreeToggle<CR>

" Use TAB in normal mode to fold/unfold
set foldmethod=indent
map <Tab> za
au BufReadPost * normal zR

" Press F4 to clear highlighting.
map <F4> :noh<CR>

" F5 toogles to Gundo panel
nnoremap <F5> :GundoToggle<CR>

" Execute current spec
map <F12> :! bin/rspec %<CR>

